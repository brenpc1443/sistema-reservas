# backend/Dockerfile - Producci칩n

# ============================================================
# BUILDER STAGE - Compilar dependencias
# ============================================================
FROM node:18-alpine AS builder

WORKDIR /app

# Instalar build tools
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    postgresql-client

# Copiar archivos de dependencias
COPY package*.json ./
COPY npm-shrinkwrap.json* ./

# Instalar dependencias
RUN npm ci --only=production && \
    npm cache clean --force

# ============================================================
# RUNTIME STAGE - Imagen final optimizada
# ============================================================
FROM node:18-alpine

WORKDIR /app

# Instalar solo las dependencias necesarias en runtime
RUN apk add --no-cache \
    postgresql-client \
    curl \
    dumb-init

# Copiar node_modules del builder
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package*.json ./

# Copiar c칩digo fuente
COPY . .

# Crear usuario no-root para seguridad
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 && \
    chown -R nodejs:nodejs /app

USER nodejs

# Exponer puerto
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Usar dumb-init para manejar se침ales correctamente
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Comando para iniciar la aplicaci칩n
CMD ["node", "server.js"]